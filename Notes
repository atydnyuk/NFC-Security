In order to reason about the security of NFC tags, we need to keep in
mind that there are different security models that can be applied to
the scenario. There are lots of different attacks that we need to
defend against and some might require tags to be smarter, or the
phones to have extra features. Different uses of the NFC tag might
also make some attacks more dangerous than others. In order to come up
with a more comprehensive analysis we will consider several possible
attacks and several security protocols to defend against them. Some
will be inexpensive to implement but will allow certain types of
attacks to go undetected, while others will be costly but will
guarantee more security.

Attacks:

When we think about attacks on a location-confirming NFC tag, we can
come up with several bad scenarios off the bat. We will enumerate
these and give them names. We try to list some of the most probable
scenarios while avoiding ones that are less likely to occur or require
considerable resources from the attacker. Specifically we don't
consider attacks that require breaking of popular cryptographic
algorithms. We also don't consider attacks that require sniffing the
unencrypted data flowing between the tag and the device. The distance
necessary for communication is so small that this variety of attack is
not really feasible. We also don't consider webserver specific attacks
because that is out of the scope of this paper.

1. Reusable Password - This is an attack that static tags are
vulnerable against. In this scenario, one person can go and read the
tag, and then put up either the password or the weblink online for
anyone to use. For example, if a restaurant wanted to confirm that
people actually went there before they are allowed to write a review
they could make a simple password field in the review form. You only
get the password if you scan the NFC tag inside the
restaurant. However, one person that goes to that restaurant can scan
the tag and put it up online for anyone to use. This way all someone
has to do is google for the password and they can write a review
without ever going to the restaurant.

2. Multiple Scan - This is an attack on a changing password system. In
this scenario we assume that the restaurant decided to do something a
bit more secure and make the tag generate a new password every
scan. This way you only allow one review per password so that someone
can't just put it up online and make it accessible to everyone. The
attack here involves a single person scanning the tag multiple times
in a row to collect several passwords. These passwords can then be put
online for people to access. Even though each one is a single-use
code, the person can scan an unlimited number of times to generate as
many as he wants.

3. Man in the Middle - This is a more complicated attack that is a
danger to any security protocol. In this scenario, we assume that a
person scans the tag, and reports the message to a friend instead of
using it. This friend then can do all of the actions that the original
scanning user should have bene able to do. If there are other steps to
the exchange (for instance the person that scanned has to provide some
information), these steps will go through the outside party first so
that any information can be supplied by the outside phone and
forwarded to the tag through the device that is doing the
scanning. This way, the man in the middle is the device that is
actually scanning the tag and the two parties communicating are the
tag and the outside user that is pretending that he is at the
location.

4. Disabling the Tag - This attack is a bit broad in the sense that it
covers all sorts of unsepecified behavior that in some way disables
the tag for the next user or users. This could be something like
writing garbage data to it, or getting it out of sync with the web
server.


Security Requirements:

Now that we have gone over some of the attacks on NFC tags, we can
consider the different setups that we have for dealing with them. We
will enumerate the setups in order from cheapest to most
demanding. The key tradeoffs in the systems are cost and
effectiveness. The cheaper setups will offer a weaker defense against
possible attacks but require comparatively little resources, while the
more demanding systems will offer a stronger defense but be way more
resource heavy.

1. Stupid Tag - This is the simplest case, and is unfortunately the
most popular one. Here we assume that the tag cannot do any
computation whatsoever. The devices that are used to scan the tag have
no security features enabled and there aren't any TPM modules
installed.

2. Tag with Signing - In this case, we assume that the tag can
cryptographically sign messages. The devices are still simple and
don't have any TPM modules installed.

3. Intensive Tag + Phone With TPM - This is the best case for
security. Here we assume that tags can be as computationally intensive
as a phone and that the devices scanning the tags have TPM modules
installed that prevent users from accessing the data passed from the
tag to the phone. This is the best case scenario in terms of security.


Security Protocols:

For each of the above requirements we will come up with a secure
protocol that devices will use to communicate with a tag. After
detailing the protocol we will examine the effectiveness of it in
terms of defending against the attacks we listed in section X and
analyze the cost of the system itself.

Here is a rundown of the protocols:

1. Requires Tag with signing + phone with TPM

a. The phone sends (IMEI) to the tag
b. Tag replies with signed(IMEI)
c. The app sends the signed(IMEI) off to the webserver
d. The webserver confirms the message and replies with a time-sensitive 
   code that is tailored to allow the phone with that IMEI access.
e. As the phone attempts to use the code, the app communicates with the TPM
   to make sure that the IMEI is correct.

This particular protocol is the most secure and also the most
costly. We will go over some example attacks and how this protocol
deals with them.

I. Reusable Password

This protocol prevents reusable password because the web interface
only accepts data that has been signed by the tag. Since the IMEI is
cryptographically signed with something like PKCS1, it is reasonable
to assume that it cannot be faked. It will also be different for each
phone because the IMEI is unique.

II. Multiple Scan

This protocol prevents multiple scans because the tag's response is a
signed copy of the phone's IMEI. This will not change no matter how
many times you try to scan. The response from the webserver is also
tied to the IMEI of the phone so that can't be passed to other people
either.

III. Man in the Middle

This protocol is not vulnerable to Man in the Middle attacks because
this requires you to pass the tag another phone's IMEI during the
first read. This is not possible because all of the communication is
self contained in the NFC application. The IMEI will also be checked
against the information from the TPM so no tampering can occur. Since
you can't feed the tag another phone's IMEI, this successfully
prevents man in the middle behavior.

IV. Disabling the Tag

This protocol does not allow you to disable the tag because the only
thing that the device can actually do is feed the tag messages to
sign. You can't write to the tag, and the webserver does not make any
assumptions on the tag's state.

2. Tag with signing + phone without TPM

Without the TPM, the protocol is pretty much the same as above, except
the phone can't know for sure that its IMEI matches the one that was
signed by the tag. Even though the device can potentially be made to
lie about its IMEI, it would have to do so at the last step of the
protocol. This means that for the attack to work, another phone must
have gone through every other step of the protocol and then forwarded
the webserver's message to this device. The device then has to spoof
that other phone's IMEI in order to fool the webserver into thinking
that it is the phone that it has been communicating with all along.

All of this is very difficult to do in practice and is eventually
proved futile assuming the phone plans to communicate with more NFC
tags in the future. Since the code given by the webserver is time
sensitive, there is a timelimit on the code exchange, and there is
also considerable hacking that has to be done in order to convince the
application that the phone's IMEI is not what it actually is. Even
then, the next time that this phone communicates with a tag, the
application will expect the same IMEI to be sent. If a different one
is sent, the previous transaction can be invalidated.

Therefore, while the absence of a TPM forces us to be a bit less
demanding, we can still effectively prevent man in the middle attacks
from happening.

3. 